// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package terragpio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SetgpioClient is the client API for Setgpio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetgpioClient interface {
	SetPWM(ctx context.Context, in *PWMRequest, opts ...grpc.CallOption) (*PWMResponse, error)
}

type setgpioClient struct {
	cc grpc.ClientConnInterface
}

func NewSetgpioClient(cc grpc.ClientConnInterface) SetgpioClient {
	return &setgpioClient{cc}
}

func (c *setgpioClient) SetPWM(ctx context.Context, in *PWMRequest, opts ...grpc.CallOption) (*PWMResponse, error) {
	out := new(PWMResponse)
	err := c.cc.Invoke(ctx, "/terragpio.setgpio/SetPWM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetgpioServer is the server API for Setgpio service.
// All implementations must embed UnimplementedSetgpioServer
// for forward compatibility
type SetgpioServer interface {
	SetPWM(context.Context, *PWMRequest) (*PWMResponse, error)
	mustEmbedUnimplementedSetgpioServer()
}

// UnimplementedSetgpioServer must be embedded to have forward compatible implementations.
type UnimplementedSetgpioServer struct {
}

func (UnimplementedSetgpioServer) SetPWM(context.Context, *PWMRequest) (*PWMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPWM not implemented")
}
func (UnimplementedSetgpioServer) mustEmbedUnimplementedSetgpioServer() {}

// UnsafeSetgpioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetgpioServer will
// result in compilation errors.
type UnsafeSetgpioServer interface {
	mustEmbedUnimplementedSetgpioServer()
}

func RegisterSetgpioServer(s grpc.ServiceRegistrar, srv SetgpioServer) {
	s.RegisterService(&Setgpio_ServiceDesc, srv)
}

func _Setgpio_SetPWM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PWMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetgpioServer).SetPWM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terragpio.setgpio/SetPWM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetgpioServer).SetPWM(ctx, req.(*PWMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Setgpio_ServiceDesc is the grpc.ServiceDesc for Setgpio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Setgpio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terragpio.setgpio",
	HandlerType: (*SetgpioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPWM",
			Handler:    _Setgpio_SetPWM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terragpio.proto",
}
